/**
  * @file ${obj.name.lower()}_regs.h
  * @author generated by mrt-device.py
  * @brief register defintions for ${obj.name} device
  * 
  */

/*******************************************************************************
  Registers
*******************************************************************************/

% for key,reg in obj.regs.items():
extern mrt_reg_t* ${obj.prefix + "_" + reg.name};
% endfor


/*******************************************************************************
  Flags and Values                                                                                 
*******************************************************************************/

% for key,reg in obj.regs.items():
% if (len(reg.fields) + len(reg.flags)) > 0 :
/* ${reg.name} */
    %for flag in reg.flags:
#define ${obj.prefix +"_"+reg.name+"_"+flag.name}                       ${reg.formatHex(flag.val)}
    %endfor
    %for field in reg.fields:
    %for val in field.vals:
#define ${obj.prefix +"_"+reg.name+"_"+field.name +"_" + val.name}      ${reg.formatHex(val.val)}
    %endfor
    %endfor
% endif
% endfor

/*******************************************************************************
  Flags and Values                                                                                 
*******************************************************************************/

typedef struct{
    mrt_regdev_t mRegDev; //ptr to register base device 
    % for key,reg in obj.regs.items():
    mrt_reg_t* ${obj.prefix + "_" + reg.name};  //$reg.desc
% endfor
}${obj.name}_t;

mrt_status_t ${obj.name}_init_i2c(mrt_regdev_t* regdev)

/*USER_CODE*/

/*END_USER_CODE*/