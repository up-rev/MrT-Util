#!/usr/bin/env python

import sys
import os
import argparse
import git
import re

args = None
parser = None

#def filter_commits:

def filter_tags(tag):

    regex = re.compile(r'VER-(.*?)\.(.*?)$')
    matches = regex.findall(tag.name)
    for m in matches:
        return True 
    
    return False    

def commitsSinceTag(repo, tag, branch = "master"):
    commits = repo.commits()
    count = 0
    for c in commits:
        if c.branch.name == branch:
            if c.committed_datetime > tag.commit.committed_datetime:
                count += 1
    return count

class VersionStruct:
    def __init__(self, major=0, minor=0, patch=0, build = 0):
        self.major = major
        self.minor = minor
        self.patch = patch
        self.build = build
        self.branch = "none"
        self.hash = ""
    
    def loadRepo(self,repo):

        self.branch = repo.active_branch.name
        vTag = None

        #load tags 
        tags = filter(filter_tags, repo.tags)
        tags = sorted(tags, key=lambda t: t.commit.committed_datetime)
        if len(tags) > 0:
            vTag = tags[-1]
            regex = re.compile(r'VER-(.*?)\.(.*?)$')
            matches = regex.findall(vTag.name)
            self.major = matches[0][0]
            self.minor = matches[0][1]
    
        if not vTag == None:
            self.patch = commitsSinceTag(repo,vTag, self.branch)


    def print(self):
        print("Version {0}.{1}.{2}.{3}".format(self.major, self.minor, self.patch, self.build))
        print("Branch: {0}".format(self.branch))
        print("Commit: {0}".format(self.hash))



  

# Initialize the argument parser
def init_args():
    global parser
    parser = argparse.ArgumentParser("Tool to generate version file")
    parser.add_argument('-o', '--output', type=str, help='Output path', default=".")
    parser.add_argument('-m', '--major', type=str, help='Major version', default="0")
    parser.add_argument('-n', '--minor', type=str, help='Minor version', default="0")
    parser.add_argument('-p', '--patch', type=str, help='Patch', default="0")
    parser.add_argument('-b', '--build', type=str, help='build number', default="0")
    parser.add_argument('-t', '--tags', action='store_true', help='use version tags in repo', default=False)

    

def main():
    global parser
    global args
    init_args()
    args = parser.parse_args() 
    vs = VersionStruct(major = args.major, minor=args.minor , patch= args.patch, build = args.build)
    
    if args.tags :
        repo = git.Repo(os.getcwd())
        vs.loadRepo(repo)

    vs.print()



if __name__ == "__main__":
    main()